import pygame
import sys
import time

# Initialize Pygame
pygame.init()

# Constants
WIDTH = 800
HEIGHT = 600
CELL_SIZE = 40
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

# Load background music
pygame.mixer.music.load("/Users/martinesposito/Desktop/mp3 music /Axel%20Lundstrom%20-%20Axel%20Video%20Game.mp3")
pygame.mixer.music.play(-1)  # Play music in a loop

# Load sound effects
monster_sound = pygame.mixer.Sound("/Users/martinesposito/Desktop/mp3 music /Axel%20Lundstrom%20-%20Axel%20Video%20Game.mp3")

# Create a window
win = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Maze Game")

# Maze representation
maze_levels = [
    [
        " ###############",
        " #S#           #",
        " # ### ####### #",
        " #   #       # #",
        " # # #####   # #",
        " # # #     # # #",
        " # # # ##### # #",
        " # #   #   # # #",
        " # ####### # # #",
        " #     #     # #",
        " ### ### ##### #",
        " # # #     # # #",
        " # # # ### # ###",
        " #   # # #    E#",
        " ###############"
    ],
    [
        " ###############",
        " #S#           #",
        " # # #####   # #",
        " # #   #     # #",
        " # ##### ### # #",
        " #       #   # #",
        " # ##### # ### #",
        " #     # #   # #",
        " # ### ### ### #",
        " # #   #   #   #",
        " # # ### ##### #",
        " # #   #       #",
        " # # ### ##### #",
        " # #     #     #",
        " # ###########E#",
        " ###############"
    ],
    [
        " ###############",
        " #S#           #",
        " # ### ####### #",
        " #   #       # #",
        " # # #####   # #",
        " # # #     # # #",
        " # # # ##### # #",
        " # #   #   # # #",
        " # ####### # # #",
        " #     #     # #",
        " ### ### #  ## #",
        " # # #     # # #",
        " # # # ### # ###",
        " #   #   #    E#",
        " ########  #####"
    ]
]

# Player position
player_x = 2
player_y = 1

# Start time
start_time = time.time()

# Level counter
level = 0

# Main game loop
while True:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        # Handle player movement
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP and maze_levels[level][player_y - 1][player_x] != '#':
                player_y -= 1
            elif event.key == pygame.K_DOWN and maze_levels[level][player_y + 1][player_x] != '#':
                player_y += 1
            elif event.key == pygame.K_LEFT and maze_levels[level][player_y][player_x - 1] != '#':
                player_x -= 1
            elif event.key == pygame.K_RIGHT and maze_levels[level][player_y][player_x + 1] != '#':
                player_x += 1

    # Check winning condition
    if maze_levels[level][player_y][player_x] == 'E':
        end_time = time.time()
        elapsed_time = end_time - start_time
        print("Congratulations! You won!")
        print("Your time: {:.2f} seconds".format(elapsed_time))
        level += 1
        if level >= len(maze_levels):
            print("You completed all levels!")
            pygame.quit()
            sys.exit()
        else:
            # Reset player position and start time for the next level
            player_x = 2
            player_y = 1
            start_time = time.time()

    # Draw maze
    win.fill(WHITE)
    for y, row in enumerate(maze_levels[level]):
        for x, cell in enumerate(row):
            if cell == '#':
                pygame.draw.rect(win, BLACK, (x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE))
            elif cell == 'S':
                pygame.draw.rect(win, GREEN, (x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE))
            elif cell == 'E':
                pygame.draw.rect(win, RED, (x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE))
    # Draw player
    pygame.draw.circle(win, (255, 0, 0), (player_x * CELL_SIZE + CELL_SIZE // 2, player_y * CELL_SIZE + CELL_SIZE // 2), CELL_SIZE // 3)

    # Update display
    pygame.display.flip()
